/**
Assignment 2
Andrea Bonato 104760390
This assignment requires us to overwrite the >> and << operator functions. It will then take in a series of colours to calculate the distance in between them.
This will then output the name of the closest color to the input.
*/

#include <cmath>
#include <array>
#include <vector>
#include <limits>
#include <string>
#include <istream>
#include <ostream>
#include <algorithm>
#include <iostream>

using namespace std;

//This is the rgb struct
struct rgb
{
	unsigned char red;
	unsigned char green;
	unsigned char blue;
};

//This is the overloaded input stream overloaded constructor
std::istream& operator >> (std::istream& is, rgb& colour)
{	
	
	unsigned r,g,b;
	is >> r;
	is >> g;
	is >> b;

	//This will make sure the values are inputted correctly
	if (r > 255 || g > 255 || b > 255)
	{
		is.setstate(ios_base::failbit);
		return is;
	}

	colour.red = r;
	colour.green = g;
	colour.blue = b;
	
	//return input
	return is;
}

//This is the output stream overloaded constructor
std::ostream& operator << (std::ostream& os, rgb const& colour)
{
	
	//Outputs the specific colors with spaces behind them
	os << static_cast<unsigned>(colour.red) << " "; 
	os << static_cast<unsigned>(colour.green) << " " ;
	os << static_cast<unsigned>(colour.blue);

	return os;
}

//This finds the distances between each of the color inputs
double distance (rgb const& a, rgb const& b)
{	
	
	return sqrt(pow((a.red - b.red),2) + pow((a.green - b.green), 2) + pow((a.blue - b.blue), 2));
 
}

int main()
{
	//Array to hold all the colour values
	array<rgb,16> const colours
	{{
	{ 0x00, 0x00, 0x00 }, // 0: black
        { 0x80, 0x00, 0x00 }, // 1: maroon
	{ 0x00, 0x80, 0x00 }, // 2: green
	{ 0x80, 0x80, 0x00 }, // 3: olive
	{ 0x00, 0x00, 0x80 }, // 4: navy
	{ 0x80, 0x00, 0x80 }, // 5: purple
	{ 0x00, 0x80, 0x80 }, // 6: teal
	{ 0xC0, 0xC0, 0xC0 }, // 7: silver
	{ 0x80, 0x80, 0x80 }, // 8: grey
	{ 0xFF, 0x00, 0x00 }, // 9: red
	{ 0x00, 0xFF, 0x00 }, // 10: lime
	{ 0xFF, 0xFF, 0x00 }, // 11: yellow
	{ 0x00, 0x00, 0xFF }, // 12: blue
	{ 0xFF, 0x00, 0xFF }, // 13: fushsia
	{ 0x00, 0xFF, 0xFF }, // 14: aqua
	{ 0xFF, 0xFF, 0xFF }  // 15: white
	}};

	// This an array that contains all the names of the colours that we will be including
	array<string,16> const colour_names
	{
    	"black", "maroon", "green", "olive", "navy", "purple", "teal", "silver",
        "gray", "red", "lime", "yellow", "blue", "fushsia", "aqua", "white"
	 };

	
	//This will cycle all the rgb values that was inputted
	for (rgb value{}; cin >> value;)
	{	
		std::vector<double> distances;
		distances.reserve(colours.size());	//This allocates enough memory for the size of the colour
		//Transform template
		transform (
			colours.begin(),
			colours.end(),
			back_inserter(distances),
			[&value](auto const& colour){return distance(colour, value); }
		);
		
		//These will be used to check the index and smallest_distance
		size_t index = std::numeric_limits<size_t>::max();
		double smallest_distance = std::numeric_limits<double>::max();
		
		//Iterate through the array distances
		for (auto i = begin(distances), iEnd= end(distances); i != iEnd; ++i)
		{	
			//check for the smallest value
			if (smallest_distance > *i)
			{
				smallest_distance = *i;
	
				index = i - begin(distances);			
			}

		} 
		
		//Check for incorrect index value
		if (index > 16)
		{
			cout << "ERROR occurred. Aborting...\n";
			return 1;
		}
		else
		{	
			//print out color value
			cout << colour_names[index] << '\n';
		}
	}

	return 0;
}
